use "standard:fleeting.yp"
use "standard:holding.yp"

# items that get "dropped on the floor" for ships to pick up
a Dropped thing is Fleeting and Mobile and Tangible and Visible and has
  a dropped flag (default true) # FIXME adjectives require at least one prop.

# ships pick up drops into their slots
in the event ?ship PicksUp ?item into ?slot then
  ?ship is a Holding thing
  ?item is a Dropped thing
  ?slot is a Capacious thing

# ...when the ship hits the drop and has an empty slot
when ?ship hits ?item and
  ?item is Dropped
  ?ship is Holding with slots ?slots
  ?slot is the first thing in ?slots which is
    Capacious with content nothing
then ?ship PicksUp ?item into ?slot

# ... or has a slot with a stack of the same type
when ?ship hits ?item and
  ?item is Dropped
  ?item is Stackable
  ?item is Typed with type ?itemType
  ?ship is Holding with slots ?slots
  ?slot is the first thing in ?slots which is
    Capacious with content ?content
    (and ?content is Typed with type ?itemType)
then ?ship PicksUp ?item into ?slot

# when a drop is picked up it stops expiring/moving and fills the slot
when ?ship PicksUp ?item into ?slot
then
  ?item becomes not Fleeting
  ?item becomes not Mobile
  ?item becomes not Located
  ?item becomes not Oriented
  ?item Fills ?slot

# commands to drop an item from a slot on a ship should emit the IsToDrop event
# FIXME this is used by controls.yp, circular dependency; this and Active should be in a third, separate file
in the event ?slot IsToDrop from ?ship then
  ?ship is a Holding thing
  ?slot is a Capacious thing

# while we're trying to drop something from a slot, it becomes TryingToDrop
a TryingToDrop thing has
  a ship which is a Mobile thing # FIXME base.yp says ships don't have to be Mobile, but this file assumes it
  a slotContent

# on IsToDrop, become TryingToDrop and then emit Dispenses (which may be
# disallowed)
when ?slot IsToDrop from ?ship and
  ?slot is Capacious with content ?content
then
  ?slot becomes TryingToDrop with ship ?ship and slotContent ?content
  ?slot Dispenses 1

in the event ?item DropsFromShip ?ship then
  ?ship is a Mobile thing

# if the slot Dispenses something and it was TryingToDrop, and the content was
# a stack, then make a copy of the stack and drop it from the ship
when ?slot Dispenses ?count and
  ?slot is TryingToDrop with ship ?ship and slotContent ?stack
  ?stack is Stackable with maximumStackSize ?mss
then
  a copy ?item of ?stack is added which is
    Stackable with currentStackSize ?count and maximumStackSize ?mss
  ?item DropsFromShip ?ship

# if the content wasn't a stack, just drop it from the ship
when ?slot Dispenses ?count and
  ?slot is TryingToDrop with ship ?ship and slotContent ?item
  ?item is not Stackable
then
  ?item DropsFromShip ?ship

when ?slot Dispenses ?count and ?slot is TryingToDrop
then ?slot becomes not TryingToDrop

in the event ?item Drops in ?space at ?position with velocity ?velocity then
  ?space is a Spatial thing
  ?position is a Vec2 object
  ?velocity is a Vec2 object

# when something is dropped from a ship, it drops in front of the ship with its
# velocity
when ?item DropsFromShip ?ship and
  ?ship is Located with space ?space and position ?shipPos
  ?ship is Oriented with orientation ?o
  ?ship is Mobile with velocity ?v
then
  let ?itemPos be (?shipPos + Vec2[cos(?o), sin(?o)] * 32)
  ?item Drops in ?space at ?itemPos with velocity ?v

# when something drops, it becomes Mobile, and expires in 1 minute
when ?item Drops in ?space at ?pos with velocity ?v then
  ?item becomes Located with space ?space and position ?pos
  ?item becomes Oriented with orientation 0
  ?item becomes Mobile with velocity ?v and angularVelocity 0
  ?item becomes Fleeting with timeToLive 1200 # 1200 ticks == 1 minute
  ?item becomes Dropped with dropped true
