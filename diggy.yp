use "standard:dropped.yp"
use "standard:active.yp"

## digging ##

a Diggy thing has
  a hardness which is a number (default 0)

a Pick is Diggy # diggy diggy hole!

a Diggable thing is Tangible and has
  # what level of pick is necessary to dig this?
  a hardness which is a number (default 0)
  # 0 => placed; (0,1) => partly dug; 1 => dropped
  a dugness which is a number (default 0)

a Block is Diggable

a Digging thing is Diggy and has
  a block which is a Diggable thing

when ?pick becomes Active with ship ?ship and
  ?pick is Diggy
  ?ship is Located with space ?space and position ?shipPos
  ?ship is Oriented with orientation ?a
  # TODO use Mapped blockSize instead of hardcoding 32 all over?
  let ?front be (?shipPos + Vec2[cos(?a), sin(?a)] * 32)
  let ?blockPos be (?front - (?front % 32))
  # TODO special case this search to use SpatialIndex for speed
  there is a thing ?block which is
    Located with space ?space and position ?blockPos
    Diggable
then ?pick becomes Digging with block ?block

when ?pick becomes not Active and ?pick is Digging
then ?pick becomes not Digging

in the event ?pick DigsAt ?block then
  ?pick is a Digging thing
  ?block is a Diggable thing

when the clock ticks and
  there is a thing ?pick which is
    Digging with block ?block
then ?pick DigsAt ?block

only allow the event ?pick DigsAt ?block when
  ?pick is Diggy with hardness ?pickHardness
  ?block is Diggable with hardness ?blockHardness
  (?pickHardness >= ?blockHardness)

when ?pick DigsAt ?block and
  ?block is Diggable with dugness ?dugness
  (?dugness < 1)
then
  # dig 1/20 per tick so that we dig a whole block in one second
  # TODO adjust this ratio according to hardness difference?
  ?block becomes Diggable with dugness (?dugness + 1/20)

# TODO heal partly dug blocks when they're not actively being dug?

in the event ?pick DigsUp ?block then
  ?pick is a Diggy thing
  ?block is a Diggable thing

when ?pick DigsAt ?block and
  ?block is Diggable with dugness ?dugness
  (?dugness >= 1)
then
  ?pick becomes not Digging
  ?pick DigsUp ?block

when ?pick DigsUp ?block and
  ?block is Located with space ?space and position ?pos
then ?block Drops in ?space at ?pos with velocity Vec2[0,0]

## placement ##

a TryingToBePlaced thing has
  a tryingToBePlaced flag (default true)

# activating a diggable block drops it while TryingToBePlaced
when ?block becomes Active with ship ?ship and
  ?block is Diggable
  ?block is Held with holder ?slot
then
  ?block becomes TryingToBePlaced
  ?slot IsToDrop from ?ship

in the event ?block IsPlaced in ?space at ?position then
  ?block is a Diggable thing
  ?position is a Vec2 object
  ?space is a Spatial thing

# when a block drops while TryingToBePlaced, it's placed
when ?block Drops in ?space at ?pos with velocity ?v
  and ?block is TryingToBePlaced
then
  ?block becomes not TryingToBePlaced
  let ?placedPos be (?pos - (?pos % 32))
  ?block IsPlaced in ?space at ?placedPos

# blocks may only be placed where there isn't already a block
disallow the event ?block IsPlaced in ?space at ?position when
  there is a thing ?otherBlock which is
    Located with space ?space and position ?position

# when a block is placed it becomes located and diggable again
when ?block IsPlaced in ?space at ?position
then
  ?block becomes
    Located with space ?space and position ?position
    Diggable with dugness 0
    not Dropped
    not Fleeting
    not Mobile

# TODO
# - standard graphical transformation for Visible blocks: make it smaller and surround it with a blue triangle
# - standard graphics for dugness
