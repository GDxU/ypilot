# base.yp - base library for YPilot, always used implicitly

a Named thing has 
  a name which is a string

# nominal subtype of the intersection of the listed supertypes
a Typing thing is Named and has
  some supertypes which are Typing things

# this identifies the nominal type of the entity it is on, independent of the
# types of its components
a Typed thing has
  a type which is a Typing thing

a Spatial thing has
  an index which is a SpatialIndex object (default SpatialIndex[])

a Space is Spatial # for convenience

a Located thing has
  a space which is a Spatial thing
  a position which is a Vec2 object (default Vec2[0,0])

a Point is Located

a Toroidal thing is Spatial and has
  a size which is a Vec2 object

when ?x becomes Located with space ?sp and position ?p and
  ?sp is Toroidal with size ?sz
  (?p["x"] < 0 or ?p["y"] < 0 or ?p["x"] >= ?sz["x"] or ?p["y"] >= ?sz["y"])
then
  ?x becomes Located with position ((?p + ?sz) % ?sz)

# tangible things participate in collisions
a Tangible thing is Located and has
  a shape which is an Array of Vec2 objects

a Mapped thing is Located and has
  a blockSize which is a Vec2 object (default Vec2[32,32]) # in pixels
  a mapSize which is a Vec2 object (default Vec2[4,4]) # in blocks
  a map which is a string (default "") # each character represents a block

a Map is Mapped

an Oriented thing has
  an orientation which is a number (default 0) # angle in radians

# can be moved
a Mobile thing is Located and Oriented and has
  a velocity which is a Vec2 object (default Vec2[0,0])
  an angularVelocity which is a number (default 0) # radians per tick

when the clock ticks and
  there is a thing ?m which is
    Mobile with velocity ?v
    Located with position ?p
then
  ?m becomes Located with position (?p + ?v)

when the clock ticks and
  there is a thing ?m which is
    Mobile with angularVelocity ?av
    Oriented with orientation ?o
then
  ?m becomes Oriented with orientation (?o + ?av)

# can be seen if Located or OnScreen
a Visible thing has
  some graphics which are SVGGeometryElement objects

# by default Visible's graphics are the same as Tangible's shape, in white
when ?thing becomes Visible with graphics nothing and
  ?thing is Tangible with shape ?shape
then ?thing becomes
  Visible with graphics [<polygon points="?shape" stroke="white" />]

# can be heard
# TODO JS implementation
an Audible thing has # is Located and?
  some audioSources which are AudioScheduledSourceNode objects

# this is the only requirement for a ship in the JS core, but you probably want
# to add other things like Tangible and Motile and Visible in a subtype
a BasicShip is Located
a Piloting thing has
  a ship which is a BasicShip

an Interfaced thing has
  an interface which is an Interface object
  a shipShape which is an Array of Vec2 objects

a Player is Named and Interfaced

# can be seen on someone's screen (as opposed to in a Space)
# This is an alternative to Located.
# If screenDims is the screen's dimensions in pixels, then the thing's position
# on the screen, in pixels, is:
#   screenDims * positionPercent / 100 + positionPixels
an OnScreen thing is Visible and has
  a player which is an Interfaced thing
  a positionPercent which is a Vec2 object (default Vec2[0,0])
  a positionPixels which is a Vec2 object (default Vec2[0,0])

a Columnar thing is Named and has
  a cellPath which is a string
  a reverseSort flag (default false)

a Column is Columnar

a BoardLike thing has
  some columns which are Columnar things
  some rowTypes which are Typing things
  some sortedColumns which are Columnar things (default [])

a Board is BoardLike
