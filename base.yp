# base.yp - base library for YPilot, always used implicitly

a Named thing has 
  a name which is a string

# nominal subtype of the intersection of the listed supertypes
a Typing thing is Named and has
  some supertypes which are Typing things

# this identifies the nominal type of the entity it is on, independent of the
# types of its components
a Typed thing has
  a type which is a Typing thing

a Located thing has
  a space which is a Space object
  a position which is a Vec2 object (default Vec2[0,0])

# solid things participate in collisions
a Solid thing is Located and has
  a shape which is an Array of Vec2 objects

a Mapped thing is Located and has
  a blockSize which is a Vec2 object (default Vec2[32,32]) # in pixels
  a mapSize which is a Vec2 object (default Vec2[4,4]) # in blocks
  a map which is a string (default "") # each character represents a block

an Oriented thing has
  an orientation which is a number (default 0) # angle in radians

# can be moved
a Mobile thing is Located and Oriented and has
  a velocity which is a Vec2 object (default Vec2[0,0])
  an angularVelocity which is a number (default 0) # radians per tick

when the clock ticks and
  there is a thing ?m which is
    Mobile with velocity ?v
    Located with position ?p
then
  ?m becomes Located with position (?p + ?v)

when the clock ticks and
  there is a thing ?m which is
    Mobile with angularVelocity ?av
    Oriented with orientation ?o
then
  ?m becomes Oriented with orientation (?o + ?av)

# can be seen
a Visible thing is Located and has
  some graphics which are SVGGeometryElement objects

# can be heard
# TODO JS implementation
an Audible thing has # is Located and?
  some audioSources which are AudioScheduledSourceNode objects

# this is the only requirement for a ship in the JS core, but you probably want
# to add other things like Solid and Motile and Visible in a subtype
a BasicShip is Located
a Piloting thing has
  a ship which is a BasicShip

# local on the network (see Located for located in space)
a Local thing has
  an interface which is an Interface object
# TODO what about NPCs? they don't need an interface

# remote on the network
# TODO connect up the JS implementation
a Remote thing has
  a connection which is a PeerConnection object
