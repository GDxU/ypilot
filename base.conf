# base.conf - base configuration file for YPilot.

# component definitions
# format:
#
# a ComponentAdjective thing is OtherAdj1 and OtherAdj2 and has
#   a propertyName which is a PropertyType
#   ...
#
# where PropertyType can be:
#   OtherAdj thing
#   JSConstructor object
#   jstype (string, number, etc.)
#   Array of PropertyType
#
# Since "has an isFoo which is a boolean" sounds awkward, the alternate syntax
# "has an isFoo flag" is available for this case.
# Similarly "has a foos which is an Array of bar" can be rephrased as "has foos
# which are bars".
# The whole "which is a PropertyType" part can be omitted, meaning anything can
# be a value of this property.


a Named thing has 
  a name which is a string

# nominal subtype of the intersection of the listed supertypes
a Typing thing is Named and has
  supertypes which are Typing things

# this identifies the nominal type of the entity it is on, independent of the
# types of its components
a Typed thing has
  a type which is a Typing thing

# physical size (radius?)
a Sized thing has
  a size which is a number

a Located thing has
  a space which is a Space object
  a position which is a Vec2 object

# solid things participate in collisions
a Solid thing is Sized and Located and has
  a shape which is an Array of Vec2 objects

an Oriented thing has
  an orientation which is a number # angle in radians

# can be moved
a Mobile thing is Located and Oriented and has
  a velocity which is a Vec2 object
  an angularVelocity which is a number # radians per tick

# keeps going when forced to move
an Inertial thing is Mobile and has
  a mass which is a number
  a force which is a Vec2 object

# can do things at the request of an Agent
an Animate thing has
  agents which are Agent objects

# can hold a single (type of) thing at a time
a Capacious thing has
  a content
  a capacity which is a number
  # restrictions on the type of thing this slot can hold; the arrays of types here are treated as unions; may use special types "Any" (top) or "No" (bottom)
  allowedContentTypes which are Typing things
  deniedContentTypes which are Typing things

# can hold several different things in different slots
a Holding thing has
  slots which are Capacious things

# can move itself using thrusters and fuel
a Motile thing is Inertial and Animate and Holding and has
  a turnSpeed which is a number
  a thrustForce which is a number
  a turnDirection which is a number # -1=CW, 1=CCW, 0=not turning
  an isThrusting flag

# can be damaged and destroyed
a Mortal thing has
  a number of hitPoints

# can damage other things
a Damaging thing has
  a number of hitPoints
  # TODO? agent allow/deny lists, for e.g. friendly fire detection

# expires after some time has elapsed (distinct from hitpoints)
a Fleeting thing has
  a timeToLive which is a number

# comes back after being destroyed, after a delay
a Respawning thing is Mortal and has
  a timeToRespawn which is a number

# can fill a slot with multiple "copies" of itself (not actually copied)
a Stackable thing is Located and has
  a currentStackSize which is a number
  a maximumStackSize which is a number

# can be seen by at least some Agents (allow/deny work similarly to those in Slot)
a Visible thing is Located and has
  graphics which are SVGGeometryElement objects
  allowedAgents which are Agent objects
  deniedAgents which are Agent objects

# can be heard by at least some agents (ditto)
an Audible thing has # is Located and?
  audioSources which are AudioScheduledSourceNode objects
  allowedAgents which are Agent objects
  deniedAgents which are Agent objects

# NOTE: originally the above two shared a "Perceptible" component, but
# sometimes we might want to be seen and not heard, or vice versa, or seen by
# different agents than those who hear

# Entity type definitions
# format:
# a EntityTypeName is a SuperTypeName1 and a SuperTypeName2 ... and is Adj1 and Adj2 ...
# FIXME I'm not sure I really need the adjective part of these, since the adjectives should all be specified at creation time with their property values

a Wall is Solid and Visible
a Ship is Mortal and Motile and Solid and Visible
a Bullet is Damaging and Fleeting and Mobile and Solid and Visible
an Item is Fleeting and Mobile and Soild and Visible

# rules
# format:
# when causingEvent and
#   condition1
#   condition2
#   ...
# then
#   effectEvent1
#   effectEvent2
#   ...
#
# where events and conditions can use ?variables
# events can be things like:
#   the clock ticks
#   ?a hits ?b
#   ?a becomes
#     Adjective1 with propertyName propertyValueExpr and pn pve
#     Adjective2 with ...
#       (if ?a was already Adjective then any unmentioned properties retain
#       their old values)
      not Adjective3
#   ?a is removed
#   a new ThingType is added which is
#     Adjective1 with ...
#   ?player presses ?key
#   ?player releases ?key
#
# conditions can be things like:
#   there is a thing/ThingType ?a which is
#     Adjective1 with ...
#   ?a is a ThingType
#   ?a is Adjective with ...
#   (?a <= ?b) 
#     (or other boolean expressions in parens)
#   ?player is (not) holding down ?key


when the clock ticks and
  there is a thing ?m which is
    Mobile with velocity ?v
    Located with position ?p
then
  ?m becomes
    Located with position (?p + ?v)

when ?a hits ?b and
  ?a is Damaging with hitPoints ?damage
  ?b is Mortal with hitPoints ?hp
then
  ?b becomes
    Mortal with hitPoints (?hp - ?damage)

when ?b hits ?a and
  ?b is a Bullet
then
  ?b is removed

when ?a becomes Mortal with hitPoints ?hp and
  (?hp <= 0)
then
  ?a is removed

when ?p is added and
  ?p is a Player # TODO define Player
then
  a new Ship is added which is
    Mortal with ...
    Motile with ...
    Animate with agents [?p]
    Mobile with ...
    Located with ...
    Oriented with ...
    Solid with ...
    Sized with ...
    Visible with ...
    Holding with ...
    # TODO (maybe there should be defaults associated with the adjectives?)
